{"ast":null,"code":"import { ɵgetAllInstancesOf, ɵisRemoteConfigSupportedFactory, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, APP_INITIALIZER, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { getValue as getValue$1, getString as getString$1, getNumber as getNumber$1, getBoolean as getBoolean$1, getAll as getAll$1 } from 'rxfire/remote-config';\nimport { activate as activate$1, ensureInitialized as ensureInitialized$1, fetchAndActivate as fetchAndActivate$1, fetchConfig as fetchConfig$1, getAll as getAll$2, getBoolean as getBoolean$2, getNumber as getNumber$2, getRemoteConfig as getRemoteConfig$1, getString as getString$2, getValue as getValue$2, setLogLevel as setLogLevel$1 } from 'firebase/remote-config';\nexport * from 'firebase/remote-config';\n\nclass RemoteConfig {\n  constructor(remoteConfig) {\n    return remoteConfig;\n  }\n\n}\n\nconst REMOTE_CONFIG_PROVIDER_NAME = 'remote-config';\n\nclass RemoteConfigInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(REMOTE_CONFIG_PROVIDER_NAME);\n  }\n\n}\n\nconst remoteConfigInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(REMOTE_CONFIG_PROVIDER_NAME))), distinct());\nconst PROVIDED_REMOTE_CONFIG_INSTANCES = new InjectionToken('angularfire2.remote-config-instances');\n\nfunction defaultRemoteConfigInstanceFactory(provided, defaultApp) {\n  if (!ɵisRemoteConfigSupportedFactory.sync()) {\n    return null;\n  }\n\n  const defaultRemoteConfig = ɵgetDefaultInstanceOf(REMOTE_CONFIG_PROVIDER_NAME, provided, defaultApp);\n  return defaultRemoteConfig && new RemoteConfig(defaultRemoteConfig);\n}\n\nfunction remoteConfigInstanceFactory(fn) {\n  return (zone, injector) => {\n    if (!ɵisRemoteConfigSupportedFactory.sync()) {\n      return null;\n    }\n\n    const remoteConfig = zone.runOutsideAngular(() => fn(injector));\n    return new RemoteConfig(remoteConfig);\n  };\n}\n\nconst REMOTE_CONFIG_INSTANCES_PROVIDER = {\n  provide: RemoteConfigInstances,\n  deps: [[new Optional(), PROVIDED_REMOTE_CONFIG_INSTANCES]]\n};\nconst DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER = {\n  provide: RemoteConfig,\n  useFactory: defaultRemoteConfigInstanceFactory,\n  deps: [[new Optional(), PROVIDED_REMOTE_CONFIG_INSTANCES], FirebaseApp]\n};\n\nclass RemoteConfigModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'rc');\n  }\n\n}\n\nRemoteConfigModule.ɵfac = function RemoteConfigModule_Factory(t) {\n  return new (t || RemoteConfigModule)();\n};\n\nRemoteConfigModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RemoteConfigModule\n});\nRemoteConfigModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER, REMOTE_CONFIG_INSTANCES_PROVIDER, {\n    provide: APP_INITIALIZER,\n    useValue: ɵisRemoteConfigSupportedFactory.async,\n    multi: true\n  }]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RemoteConfigModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER, REMOTE_CONFIG_INSTANCES_PROVIDER, {\n        provide: APP_INITIALIZER,\n        useValue: ɵisRemoteConfigSupportedFactory.async,\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nfunction provideRemoteConfig(fn, ...deps) {\n  return {\n    ngModule: RemoteConfigModule,\n    providers: [{\n      provide: PROVIDED_REMOTE_CONFIG_INSTANCES,\n      useFactory: remoteConfigInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, FirebaseApps, ...deps]\n    }]\n  };\n} // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\n\nconst getValueChanges = ɵzoneWrap(getValue$1, true);\nconst getStringChanges = ɵzoneWrap(getString$1, true);\nconst getNumberChanges = ɵzoneWrap(getNumber$1, true);\nconst getBooleanChanges = ɵzoneWrap(getBoolean$1, true);\nconst getAllChanges = ɵzoneWrap(getAll$1, true);\nconst isSupported = ɵisRemoteConfigSupportedFactory.async; // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\nconst activate = ɵzoneWrap(activate$1, true);\nconst ensureInitialized = ɵzoneWrap(ensureInitialized$1, true);\nconst fetchAndActivate = ɵzoneWrap(fetchAndActivate$1, true);\nconst fetchConfig = ɵzoneWrap(fetchConfig$1, true);\nconst getAll = ɵzoneWrap(getAll$2, true);\nconst getBoolean = ɵzoneWrap(getBoolean$2, true);\nconst getNumber = ɵzoneWrap(getNumber$2, true);\nconst getRemoteConfig = ɵzoneWrap(getRemoteConfig$1, true);\nconst getString = ɵzoneWrap(getString$2, true);\nconst getValue = ɵzoneWrap(getValue$2, true);\nconst setLogLevel = ɵzoneWrap(setLogLevel$1, true);\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RemoteConfig, RemoteConfigInstances, RemoteConfigModule, activate, ensureInitialized, fetchAndActivate, fetchConfig, getAll, getAllChanges, getBoolean, getBooleanChanges, getNumber, getNumberChanges, getRemoteConfig, getString, getStringChanges, getValue, getValueChanges, isSupported, provideRemoteConfig, remoteConfigInstance$, setLogLevel };","map":{"version":3,"sources":["C:/Users/mende/Documents/Angular/FerreteriaDonPepe/node_modules/@angular/fire/fesm2015/angular-fire-remote-config.js"],"names":["ɵgetAllInstancesOf","ɵisRemoteConfigSupportedFactory","ɵgetDefaultInstanceOf","VERSION","ɵAngularFireSchedulers","ɵzoneWrap","timer","from","concatMap","distinct","i0","InjectionToken","Optional","APP_INITIALIZER","NgModule","NgZone","Injector","FirebaseApp","FirebaseApps","registerVersion","getValue","getValue$1","getString","getString$1","getNumber","getNumber$1","getBoolean","getBoolean$1","getAll","getAll$1","activate","activate$1","ensureInitialized","ensureInitialized$1","fetchAndActivate","fetchAndActivate$1","fetchConfig","fetchConfig$1","getAll$2","getBoolean$2","getNumber$2","getRemoteConfig","getRemoteConfig$1","getString$2","getValue$2","setLogLevel","setLogLevel$1","RemoteConfig","constructor","remoteConfig","REMOTE_CONFIG_PROVIDER_NAME","RemoteConfigInstances","remoteConfigInstance$","pipe","PROVIDED_REMOTE_CONFIG_INSTANCES","defaultRemoteConfigInstanceFactory","provided","defaultApp","sync","defaultRemoteConfig","remoteConfigInstanceFactory","fn","zone","injector","runOutsideAngular","REMOTE_CONFIG_INSTANCES_PROVIDER","provide","deps","DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER","useFactory","RemoteConfigModule","full","ɵfac","ɵmod","ɵinj","useValue","async","multi","type","args","providers","provideRemoteConfig","ngModule","getValueChanges","getStringChanges","getNumberChanges","getBooleanChanges","getAllChanges","isSupported"],"mappings":"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","sourcesContent":["import { ɵgetAllInstancesOf, ɵisRemoteConfigSupportedFactory, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, APP_INITIALIZER, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { getValue as getValue$1, getString as getString$1, getNumber as getNumber$1, getBoolean as getBoolean$1, getAll as getAll$1 } from 'rxfire/remote-config';\nimport { activate as activate$1, ensureInitialized as ensureInitialized$1, fetchAndActivate as fetchAndActivate$1, fetchConfig as fetchConfig$1, getAll as getAll$2, getBoolean as getBoolean$2, getNumber as getNumber$2, getRemoteConfig as getRemoteConfig$1, getString as getString$2, getValue as getValue$2, setLogLevel as setLogLevel$1 } from 'firebase/remote-config';\nexport * from 'firebase/remote-config';\n\nclass RemoteConfig {\n    constructor(remoteConfig) {\n        return remoteConfig;\n    }\n}\nconst REMOTE_CONFIG_PROVIDER_NAME = 'remote-config';\nclass RemoteConfigInstances {\n    constructor() {\n        return ɵgetAllInstancesOf(REMOTE_CONFIG_PROVIDER_NAME);\n    }\n}\nconst remoteConfigInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(REMOTE_CONFIG_PROVIDER_NAME))), distinct());\n\nconst PROVIDED_REMOTE_CONFIG_INSTANCES = new InjectionToken('angularfire2.remote-config-instances');\nfunction defaultRemoteConfigInstanceFactory(provided, defaultApp) {\n    if (!ɵisRemoteConfigSupportedFactory.sync()) {\n        return null;\n    }\n    const defaultRemoteConfig = ɵgetDefaultInstanceOf(REMOTE_CONFIG_PROVIDER_NAME, provided, defaultApp);\n    return defaultRemoteConfig && new RemoteConfig(defaultRemoteConfig);\n}\nfunction remoteConfigInstanceFactory(fn) {\n    return (zone, injector) => {\n        if (!ɵisRemoteConfigSupportedFactory.sync()) {\n            return null;\n        }\n        const remoteConfig = zone.runOutsideAngular(() => fn(injector));\n        return new RemoteConfig(remoteConfig);\n    };\n}\nconst REMOTE_CONFIG_INSTANCES_PROVIDER = {\n    provide: RemoteConfigInstances,\n    deps: [\n        [new Optional(), PROVIDED_REMOTE_CONFIG_INSTANCES],\n    ]\n};\nconst DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER = {\n    provide: RemoteConfig,\n    useFactory: defaultRemoteConfigInstanceFactory,\n    deps: [\n        [new Optional(), PROVIDED_REMOTE_CONFIG_INSTANCES],\n        FirebaseApp,\n    ]\n};\nclass RemoteConfigModule {\n    constructor() {\n        registerVersion('angularfire', VERSION.full, 'rc');\n    }\n}\nRemoteConfigModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RemoteConfigModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRemoteConfigModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RemoteConfigModule });\nRemoteConfigModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RemoteConfigModule, providers: [\n        DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER,\n        REMOTE_CONFIG_INSTANCES_PROVIDER,\n        {\n            provide: APP_INITIALIZER,\n            useValue: ɵisRemoteConfigSupportedFactory.async,\n            multi: true,\n        },\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RemoteConfigModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER,\n                        REMOTE_CONFIG_INSTANCES_PROVIDER,\n                        {\n                            provide: APP_INITIALIZER,\n                            useValue: ɵisRemoteConfigSupportedFactory.async,\n                            multi: true,\n                        },\n                    ]\n                }]\n        }], ctorParameters: function () { return []; } });\nfunction provideRemoteConfig(fn, ...deps) {\n    return {\n        ngModule: RemoteConfigModule,\n        providers: [{\n                provide: PROVIDED_REMOTE_CONFIG_INSTANCES,\n                useFactory: remoteConfigInstanceFactory(fn),\n                multi: true,\n                deps: [\n                    NgZone,\n                    Injector,\n                    ɵAngularFireSchedulers,\n                    FirebaseApps,\n                    ...deps,\n                ]\n            }]\n    };\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst getValueChanges = ɵzoneWrap(getValue$1, true);\nconst getStringChanges = ɵzoneWrap(getString$1, true);\nconst getNumberChanges = ɵzoneWrap(getNumber$1, true);\nconst getBooleanChanges = ɵzoneWrap(getBoolean$1, true);\nconst getAllChanges = ɵzoneWrap(getAll$1, true);\n\nconst isSupported = ɵisRemoteConfigSupportedFactory.async;\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst activate = ɵzoneWrap(activate$1, true);\nconst ensureInitialized = ɵzoneWrap(ensureInitialized$1, true);\nconst fetchAndActivate = ɵzoneWrap(fetchAndActivate$1, true);\nconst fetchConfig = ɵzoneWrap(fetchConfig$1, true);\nconst getAll = ɵzoneWrap(getAll$2, true);\nconst getBoolean = ɵzoneWrap(getBoolean$2, true);\nconst getNumber = ɵzoneWrap(getNumber$2, true);\nconst getRemoteConfig = ɵzoneWrap(getRemoteConfig$1, true);\nconst getString = ɵzoneWrap(getString$2, true);\nconst getValue = ɵzoneWrap(getValue$2, true);\nconst setLogLevel = ɵzoneWrap(setLogLevel$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RemoteConfig, RemoteConfigInstances, RemoteConfigModule, activate, ensureInitialized, fetchAndActivate, fetchConfig, getAll, getAllChanges, getBoolean, getBooleanChanges, getNumber, getNumberChanges, getRemoteConfig, getString, getStringChanges, getValue, getValueChanges, isSupported, provideRemoteConfig, remoteConfigInstance$, setLogLevel };\n"]},"metadata":{},"sourceType":"module"}